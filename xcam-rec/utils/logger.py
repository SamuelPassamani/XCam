# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         logger.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.1.0
# @lastupdate:     2025-07-13
# @description:    Este m√≥dulo centraliza a configura√ß√£o do sistema de logging para o projeto XCam Rec.
#                  Ele cria um logger robusto, colorido e com emojis que fornece feedback visual
#                  tanto no console quanto em um arquivo de log persistente, cujo caminho √©
#                  definido no arquivo de configura√ß√£o central (config.py).
# @modes:          - Console (stdout): Sa√≠da colorida e com emojis para acompanhamento em tempo real.
#                  - Arquivo (xcam_rec.log): Sa√≠da de texto puro para auditoria e an√°lise posterior.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

# Importa√ß√µes necess√°rias para o funcionamento do m√≥dulo.
import logging  # Biblioteca padr√£o do Python para logging.
import sys      # Usado para direcionar a sa√≠da do log para o console (stdout).
import os       # Usado para manipula√ß√£o de caminhos e cria√ß√£o de diret√≥rios.

# Importa as configura√ß√µes de caminho do nosso arquivo central.
from config import LOGS_PATH

# Dicion√°rio com c√≥digos de escape ANSI para colorir o texto no terminal.
COLORS = {
    "DEBUG": "\x1b[38;5;240m",
    "INFO": "\x1b[38;5;250m",
    "WARNING": "\x1b[33;1m",
    "ERROR": "\x1b[31;1m",
    "CRITICAL": "\x1b[31;1;4m",
    "RESET": "\x1b[0m"
}

# Dicion√°rio que mapeia os n√≠veis de log a emojis correspondentes.
EMOJIS = {
    "DEBUG": "üêõ",
    "INFO": "‚ÑπÔ∏è",
    "WARNING": "‚ö†Ô∏è",
    "ERROR": "‚ùå",
    "CRITICAL": "üî•"
}

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

class ColorEmojiFormatter(logging.Formatter):
    """
    Uma classe de formata√ß√£o personalizada para o logger.
    Permite a inser√ß√£o de cores e emojis nas mensagens de log exibidas no console.
    """
    def __init__(self, fmt):
        super().__init__(fmt)
        self.fmt = fmt

    def format(self, record):
        """Formata o registro de log, adicionando cor e emoji de acordo com o n√≠vel."""
        color = COLORS.get(record.levelname, COLORS["RESET"])
        emoji = EMOJIS.get(record.levelname, "")
        log_fmt = f"{color}[%(asctime)s] {emoji}  %(message)s{COLORS['RESET']}"
        formatter = logging.Formatter(log_fmt, datefmt='%Y-%m-%d %H:%M:%S')
        return formatter.format(record)

def setup_logger():
    """
    Configura e inicializa a inst√¢ncia principal do logger para todo o projeto.
    A localiza√ß√£o do arquivo de log √© lida do arquivo `config.py`.
    """
    # Obt√©m (ou cria) uma inst√¢ncia do logger com o nome "XCamRec".
    logger = logging.getLogger("XCamRec")
    logger.setLevel(logging.INFO)

    # Evita adicionar m√∫ltiplos handlers se a fun√ß√£o for chamada mais de uma vez.
    if logger.hasHandlers():
        logger.handlers.clear()

    # --- Configura√ß√£o do Handler para o Console (stdout) ---
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(ColorEmojiFormatter(fmt="[%(asctime)s] %(message)s"))
    logger.addHandler(console_handler)

    # --- Configura√ß√£o do Handler para o Arquivo ---
    try:
        # Garante que o diret√≥rio de logs, definido em config.py, exista.
        os.makedirs(LOGS_PATH, exist_ok=True)
        
        # Constr√≥i o caminho completo para o arquivo de log.
        log_file_path = os.path.join(LOGS_PATH, "xcam_rec.log")
        
        # Cria um handler que escreve os logs no caminho especificado.
        file_handler = logging.FileHandler(log_file_path, mode='a', encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(logging.Formatter("[%(asctime)s] [%(levelname)s] - %(message)s", datefmt='%Y-%m-%d %H:%M:%S'))
        logger.addHandler(file_handler)
        
    except Exception as e:
        # Se houver um erro ao criar o diret√≥rio ou o arquivo de log (ex: permiss√£o negada),
        # loga um erro cr√≠tico no console para alertar o usu√°rio.
        logger.critical(f"üî• Falha ao configurar o logging em arquivo no caminho '{LOGS_PATH}': {e}")
        logger.critical("   Os logs ser√£o exibidos apenas no console.")

    return logger

# Cria a inst√¢ncia √∫nica e global do logger que ser√° importada por outros m√≥dulos.
log = setup_logger()

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

# @log de mudan√ßas:
# 2025-07-13 (v1.1.0):
# - REFINAMENTO: O m√≥dulo agora importa a vari√°vel `LOGS_PATH` do arquivo `config.py`.
# - MELHORIA: A fun√ß√£o `setup_logger` agora cria o diret√≥rio de logs se ele n√£o existir.
# - ROBUSTEZ: Adicionado tratamento de erro caso a cria√ß√£o do diret√≥rio ou arquivo de log falhe.
#
# 2025-07-12 (v1.0.0):
# - Cria√ß√£o inicial do m√≥dulo `logger.py`.
# - Implementa√ß√£o de sistema de logging profissional com cores e emojis.
# - Configura√ß√£o de dupla sa√≠da: console e arquivo.

# @roadmap futuro:
# - Adicionar a possibilidade de configurar o n√≠vel do log via argumentos de linha de comando.
# - Integrar com servi√ßos de logging em nuvem (ex: Sentry, Logtail).
# - Implementar um mecanismo de rota√ß√£o de arquivos de log (log rotation).
