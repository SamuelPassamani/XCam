# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         video_utils.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.2.0
# @lastupdate:     2025-07-14
# @description:    M√≥dulo utilit√°rio para opera√ß√µes de p√≥s-processamento de v√≠deo.
#                  Cont√©m fun√ß√µes para extrair metadados de ficheiros de v√≠deo (como a dura√ß√£o)
#                  e para gerir os ficheiros gravados com base nas regras de neg√≥cio
#                  definidas nas configura√ß√µes (ex: dura√ß√£o m√≠nima).
# @modes:          - Extra√ß√£o de Metadados de V√≠deo.
#                  - Valida√ß√£o e Gest√£o de Ficheiros Gravados.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

import subprocess  # Necess√°rio para executar comandos externos como o ffprobe.
import json        # Para analisar a sa√≠da JSON do ffprobe.
import logging     # Para registar o progresso e os erros de forma consistente.
import os          # Usado para verificar a exist√™ncia e remover ficheiros.

# Inicializa um logger espec√≠fico para este m√≥dulo, permitindo um controlo granular dos logs.
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def get_video_duration(file_path):
    """
    Obt√©m a dura√ß√£o de um ficheiro de v√≠deo em segundos usando o ffprobe.

    Args:
        file_path (str): O caminho completo para o ficheiro de v√≠deo (ex: ".../video.mp4").

    Returns:
        float: A dura√ß√£o do v√≠deo em segundos. Retorna 0.0 se ocorrer um erro.
    """
    # Constr√≥i o comando ffprobe para obter os metadados do v√≠deo em formato JSON.
    command = [
        "ffprobe",
        "-v", "quiet",
        "-print_format", "json",
        "-show_format",
        "-show_streams",
        file_path
    ]

    try:
        # Executa o comando ffprobe e captura a sua sa√≠da.
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        video_info = json.loads(result.stdout)

        # Extrai a dura√ß√£o do campo 'format'.
        if 'format' in video_info and 'duration' in video_info['format']:
            duration = float(video_info['format']['duration'])
            logger.debug(f"üîç Dura√ß√£o verificada para '{file_path}': {duration:.2f} segundos.")
            return duration
        else:
            logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel encontrar a informa√ß√£o de dura√ß√£o na sa√≠da do ffprobe para '{file_path}'.")
            return 0.0

    except FileNotFoundError:
        logger.error("‚ùå Erro Cr√≠tico: O comando 'ffprobe' n√£o foi encontrado. Verifique se o FFmpeg est√° instalado e no PATH do sistema.")
        return 0.0
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao executar o ffprobe para o ficheiro '{file_path}': {e.stderr}")
        return 0.0
    except (json.JSONDecodeError, KeyError, ValueError) as e:
        logger.error(f"‚ùå Erro ao analisar a sa√≠da do ffprobe para '{file_path}': {e}")
        return 0.0

def manage_recorded_file(video_path, thumbnail_path, min_duration):
    """
    Verifica a dura√ß√£o de uma grava√ß√£o e a descarta se for inferior ao m√≠nimo necess√°rio.

    Args:
        video_path (str): O caminho completo para o ficheiro de v√≠deo (.mp4) gravado.
        thumbnail_path (str): O caminho completo para a miniatura (.jpg) associada.
        min_duration (int): A dura√ß√£o m√≠nima em segundos que a grava√ß√£o deve ter para ser mantida.

    Returns:
        bool: Retorna True se o ficheiro foi mantido, e False se foi descartado ou se ocorreu um erro.
    """
    logger.info(f"üîé A validar o ficheiro gravado: {os.path.basename(video_path)}")

    actual_duration = get_video_duration(video_path)

    if 0 < actual_duration < min_duration:
        logger.warning(f"üóëÔ∏è Grava√ß√£o para '{os.path.basename(video_path)}' tem apenas {actual_duration:.2f}s (m√≠nimo exigido: {min_duration}s). A descartar ficheiros.")
        
        try:
            if os.path.exists(video_path):
                os.remove(video_path)
                logger.info(f"üóëÔ∏è Ficheiro de v√≠deo '{os.path.basename(video_path)}' descartado com sucesso.")
            
            if os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)
                logger.info(f"üóëÔ∏è Ficheiro de miniatura '{os.path.basename(thumbnail_path)}' descartado com sucesso.")
            
            return False
            
        except OSError as e:
            logger.error(f"‚ùå Erro de sistema ao tentar apagar os ficheiros para '{video_path}': {e}")
            return False
    
    elif actual_duration == 0:
        logger.error(f"‚ùóÔ∏è N√£o foi poss√≠vel determinar a dura√ß√£o de '{video_path}'. O ficheiro pode estar corrompido. A manter por precau√ß√£o.")
        return False

    logger.info(f"‚úÖ Grava√ß√£o '{os.path.basename(video_path)}' validada e mantida com {actual_duration:.2f}s.")
    return True

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

# @log de mudan√ßas:
# 2025-07-14 (v1.2.0):
# - FEATURE: Adicionados emojis a todas as sa√≠das de log para melhorar a legibilidade e o apelo visual.
#
# 2025-07-14 (v1.1.0):
# - FEATURE: Adicionada a fun√ß√£o de alto n√≠vel `manage_recorded_file` que encapsula a l√≥gica de valida√ß√£o.
# - REFACTOR: Melhorado o tratamento de exce√ß√µes e o logging na fun√ß√£o `get_video_duration`.
#
# 2025-07-14 (v1.0.0):
# - Cria√ß√£o inicial do arquivo `video_utils.py`.

# @roadmap futuro:
# - Adicionar uma fun√ß√£o para extrair outros metadados do v√≠deo, como resolu√ß√£o, codec ou bitrate.
# - Implementar uma fun√ß√£o de verifica√ß√£o de integridade do ficheiro (ex: `ffprobe -v error`).
