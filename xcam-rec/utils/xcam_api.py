# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         xcam_api.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.6.0
# @lastupdate:     2025-07-14
# @description:    Este m√≥dulo serve como um cliente dedicado para a API do XCam. Ele encapsula
#                  toda a l√≥gica de comunica√ß√£o, incluindo a busca de modelos online e a busca
#                  de informa√ß√µes de stream de um utilizador espec√≠fico (l√≥gica de fallback).
#                  Utiliza um logger modular para registo de eventos.
# @modes:          - Cliente de API RESTful.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

# --- Importa√ß√µes de Bibliotecas Padr√£o ---
import requests                     # Biblioteca padr√£o para realizar requisi√ß√µes HTTP em Python.
import logging                      # Biblioteca padr√£o para logging.
import json                         # Para o caso de a resposta da API n√£o ser um JSON v√°lido.
from typing import Dict, Any, List, Optional # Tipos para anota√ß√µes, melhorando a clareza do c√≥digo.

# --- Importa√ß√µes de M√≥dulos do Projeto ---
from config import API_BASE_URL     # Importa a URL base do nosso arquivo de configura√ß√£o central.

# --- Vari√°veis Globais ---
# CORRE√á√ÉO: Inicializa um logger espec√≠fico para este m√≥dulo, seguindo o padr√£o correto.
logger = logging.getLogger(__name__)

# Define o tempo m√°ximo em segundos que uma requisi√ß√£o ir√° esperar por uma resposta da API.
REQUEST_TIMEOUT = 15

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def get_online_models(page: int = 1, limit: int = 1000, country: Optional[str] = None) -> List[Dict[str, Any]]:
    """
    Busca uma lista paginada de modelos online da API XCam.

    Args:
        page (int, optional): O n√∫mero da p√°gina a ser consultada. Padr√£o √© 1.
        limit (int, optional): O n√∫mero de resultados por p√°gina. Padr√£o √© 1000.
        country (Optional[str], optional): C√≥digo do pa√≠s (ex: 'br', 'us'). Padr√£o √© None (todos).

    Returns:
        List[Dict[str, Any]]: Uma lista de dicion√°rios, cada um representando um modelo online.
                              Retorna uma lista vazia em caso de erro.
    """
    # O endpoint para a lista de modelos online.
    endpoint = "/"
    # Constr√≥i o dicion√°rio de par√¢metros para a requisi√ß√£o.
    params = {'page': page, 'limit': limit}
    # Adiciona o pa√≠s aos par√¢metros apenas se for fornecido.
    if country:
        params['country'] = country
    
    # Constr√≥i a URL completa para a requisi√ß√£o.
    url = f"{API_BASE_URL}{endpoint}"
    logger.info(f"üì° Buscando lista de modelos em: {url} com par√¢metros: {params}")

    try:
        # Realiza a requisi√ß√£o HTTP GET.
        response = requests.get(url, params=params, timeout=REQUEST_TIMEOUT)
        # Levanta uma exce√ß√£o para c√≥digos de erro (4xx ou 5xx).
        response.raise_for_status()
        # Converte a resposta JSON em um dicion√°rio Python.
        data = response.json()

        # Valida a estrutura da resposta e extrai a lista de modelos.
        if data and isinstance(data.get("broadcasts"), dict) and isinstance(data["broadcasts"].get("items"), list):
            models = data["broadcasts"]["items"]
            logger.info(f"‚úÖ {len(models)} modelos encontrados.")
            return models
        else:
            logger.warning(f"‚ö†Ô∏è Formato de resposta inesperado ou lista de modelos vazia em {url}")
            return []

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Erro de rede/HTTP ao buscar modelos online: {e}")
        return []
    except json.JSONDecodeError:
        logger.error(f"‚ùå Falha ao decodificar a resposta JSON da URL: {url}")
        return []
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado ao buscar modelos online: {e}", exc_info=True)
        return []

def get_user_live_info(username: str) -> Optional[Dict[str, Any]]:
    """
    FEATURE: Busca informa√ß√µes detalhadas do stream de um utilizador espec√≠fico.
    Esta fun√ß√£o serve como fallback para quando a URL do stream n√£o vem na lista principal.

    Args:
        username (str): O nome do utilizador para o qual buscar as informa√ß√µes.

    Returns:
        Optional[Dict[str, Any]]: Um dicion√°rio com os detalhes do stream, ou None se falhar.
    """
    # Constr√≥i o endpoint din√¢mico para o utilizador espec√≠fico.
    endpoint = f"/user/{username}/liveInfo"
    # Constr√≥i a URL completa para a requisi√ß√£o.
    url = f"{API_BASE_URL}{endpoint}"
    logger.info(f"üì° Buscando URL de fallback para '{username}' em: {url}")

    try:
        # Realiza a requisi√ß√£o HTTP GET.
        response = requests.get(url, timeout=REQUEST_TIMEOUT)
        # Levanta uma exce√ß√£o para c√≥digos de erro.
        response.raise_for_status()
        # Retorna os dados do stream se a requisi√ß√£o for bem-sucedida.
        live_info = response.json()
        logger.info(f"‚úÖ Informa√ß√µes de stream encontradas para '{username}'.")
        return live_info

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Erro de rede/HTTP ao buscar live info para '{username}': {e}")
        return None
    except json.JSONDecodeError:
        logger.error(f"‚ùå Falha ao decodificar a resposta JSON para live info de '{username}' em: {url}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado ao buscar live info para '{username}': {e}", exc_info=True)
        return None

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

# @log de mudan√ßas:
# 2025-07-14 (v1.6.0):
# - FEATURE: Adicionada a nova fun√ß√£o `get_user_live_info(username)` para buscar a URL do stream
#   num endpoint secund√°rio, implementando a l√≥gica de fallback.
# - CORRE√á√ÉO: Removida a importa√ß√£o `from utils.logger import log` e padronizado o uso do logger
#   com `import logging; logger = logging.getLogger(__name__)`, resolvendo o `ImportError`.
# - DOCS: Atualiza√ß√£o completa dos coment√°rios e da estrutura do arquivo para o padr√£o XCam.
#
# 2025-07-14 (v1.5.0):
# - CORRE√á√ÉO CR√çTICA: O endpoint da API foi corrigido de "/v1/online" para "/".
#
# 2025-07-14 (v1.4.0):
# - REFACTOR: Padronizado o uso do logger e renomeada a fun√ß√£o principal.

# @roadmap futuro:
# - Implementar um modelo de classes (ex: `XCamAPIClient`) para organizar melhor as chamadas se a API crescer.
# - Adicionar caching (com TTL) para requisi√ß√µes, especialmente para `get_user_live_info`.
# - Criar modelos de dados (ex: com Pydantic) para validar as respostas da API de forma mais robusta.
