# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         ffmpeg_recorder.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        2.1.0
# @lastupdate:     2025-07-14
# @description:    M√≥dulo unificado para interagir com o FFmpeg. Orquestra a grava√ß√£o de
#                  streams HLS, monitoriza o progresso em tempo real com uma barra de status
#                  detalhada e, ao final, captura uma miniatura (thumbnail) do v√≠deo gravado.
#                  Este m√≥dulo combina as funcionalidades de grava√ß√£o e captura de imagem.
# @modes:          - Grava√ß√£o de Stream HLS com Monitoriza√ß√£o de Progresso.
#                  - Captura de Miniatura de V√≠deo.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

import os               # Usado para intera√ß√µes com o sistema operacional, como criar diret√≥rios.
import re               # M√≥dulo de express√µes regulares, para analisar a sa√≠da do FFmpeg.
import subprocess       # Biblioteca principal para executar e gerenciar processos externos.
import logging          # Para registar eventos importantes de forma padronizada.
import math             # Para c√°lculos matem√°ticos (arredondamento) no progresso.
from typing import Optional # Para anota√ß√µes de tipo, melhorando a clareza do c√≥digo.

# Inicializa um logger espec√≠fico para este m√≥dulo, permitindo um controlo granular dos logs.
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def _format_seconds(seconds: float) -> str:
    """
    Formata um total de segundos para o formato de tempo leg√≠vel HH:MM:SS.
    Fun√ß√£o auxiliar interna para a barra de progresso.

    Args:
        seconds (float): O n√∫mero total de segundos a ser formatado.

    Returns:
        str: A string de tempo formatada (ex: "01:23:45").
    """
    # Converte os segundos para inteiros para os c√°lculos.
    seconds = int(seconds)
    # Calcula as horas.
    h = seconds // 3600
    # Calcula os minutos restantes.
    m = (seconds % 3600) // 60
    # Calcula os segundos restantes.
    s = seconds % 60
    # Retorna a string formatada com zeros √† esquerda para garantir dois d√≠gitos.
    return f"{h:02d}:{m:02d}:{s:02d}"

def _log_progress(username: str, elapsed_seconds: float, total_seconds: int):
    """
    Exibe o progresso da grava√ß√£o de cada transmiss√£o em tempo real no console.
    Fun√ß√£o auxiliar interna para a grava√ß√£o.

    Args:
        username (str): O nome do utilizador para identifica√ß√£o no log.
        elapsed_seconds (float): O tempo de grava√ß√£o j√° decorrido.
        total_seconds (int): A dura√ß√£o total esperada da grava√ß√£o.
    """
    # Calcula a percentagem conclu√≠da, garantindo que n√£o ultrapasse 100%.
    percent = min((elapsed_seconds / total_seconds) * 100, 100)
    # Formata o tempo decorrido para um formato leg√≠vel.
    tempo_decorrido = _format_seconds(elapsed_seconds)
    # Calcula os minutos totais gravados.
    minutos_gravados = math.floor(elapsed_seconds / 60)
    # Calcula os minutos restantes, garantindo que n√£o seja negativo.
    minutos_restantes = max(0, math.ceil((total_seconds - elapsed_seconds) / 60))
    
    # Imprime a linha de progresso formatada.
    # O `end='\r'` faz com que o cursor volte ao in√≠cio da linha, permitindo que a
    # pr√≥xima impress√£o sobrescreva a atual, criando o efeito de atualiza√ß√£o em tempo real.
    print(f"‚è±Ô∏è  [{username}] Gravados: {minutos_gravados} min | Restantes: {minutos_restantes} min | Tempo total: {tempo_decorrido} ‚Äî üìä {percent:.1f}% conclu√≠do", end='\r')

def capture_thumbnail(video_path: str, thumbnail_path: str, timestamp: str = "00:00:07") -> bool:
    """
    Captura um √∫nico frame (thumbnail) de um arquivo de v√≠deo num ponto espec√≠fico.

    Args:
        video_path (str): O caminho para o arquivo de v√≠deo de entrada.
        thumbnail_path (str): O caminho onde a imagem do thumbnail ser√° salva.
        timestamp (str, optional): O ponto no v√≠deo para capturar o frame (HH:MM:SS). Padr√£o √© "00:00:07".

    Returns:
        bool: True se o thumbnail foi criado com sucesso, False caso contr√°rio.
    """
    # Verifica se o v√≠deo de origem existe antes de tentar criar o thumbnail.
    if not os.path.exists(video_path):
        logger.error(f"üñºÔ∏è‚ùå Erro: V√≠deo n√£o encontrado em '{video_path}' para captura de thumbnail.")
        return False

    # Garante que o diret√≥rio de destino para o thumbnail exista.
    os.makedirs(os.path.dirname(thumbnail_path), exist_ok=True)

    # Constr√≥i o comando FFmpeg para extrair um √∫nico frame de alta qualidade.
    command = [
        'ffmpeg',
        '-i', video_path,           # Arquivo de v√≠deo de entrada.
        '-ss', timestamp,           # Flag para "buscar" (-ss) um ponto espec√≠fico no tempo.
        '-vframes', '1',            # Extrai exatamente 1 frame de v√≠deo.
        '-q:v', '2',                # Define a qualidade do JPEG de sa√≠da (escala de 1-31, onde 2-5 √© alta qualidade).
        '-y',                       # Sobrescreve o arquivo de sa√≠da se ele j√° existir.
        thumbnail_path              # O caminho do arquivo de imagem de sa√≠da.
    ]

    logger.info(f"üñºÔ∏è  Capturando thumbnail de '{os.path.basename(video_path)}' para '{os.path.basename(thumbnail_path)}'.")

    try:
        # Executa o comando. `check=True` lan√ßa uma exce√ß√£o se o FFmpeg falhar.
        # `capture_output=True` esconde a sa√≠da do FFmpeg do console, mantendo o log limpo.
        subprocess.run(command, check=True, capture_output=True, text=True, encoding='utf-8')
        logger.info(f"üñºÔ∏è‚úÖ Thumbnail capturado com sucesso: {thumbnail_path}")
        return True
        
    except FileNotFoundError:
        logger.critical("‚ùå Erro Cr√≠tico: 'ffmpeg' n√£o encontrado. N√£o foi poss√≠vel capturar o thumbnail.")
        return False
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå FFmpeg falhou ao capturar thumbnail. Erro: {e.stderr.strip()}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Ocorreu uma exce√ß√£o inesperada durante a captura do thumbnail: {e}")
        return False

def record_stream_and_capture_thumbnail(username: str, stream_url: str, output_path: str, thumbnail_path: str, max_duration: int) -> bool:
    """
    Orquestra o processo completo: grava um stream e, se bem-sucedido, captura um thumbnail.
    """
    logger.info(f"üé• Preparando para gravar '{username}' com dura√ß√£o m√°xima de {max_duration}s.")
    
    # Constr√≥i o comando FFmpeg para a grava√ß√£o do stream.
    command = [
        'ffmpeg',
        '-i', stream_url,
        '-t', str(max_duration),
        '-c', 'copy',
        '-bsf:a', 'aac_adtstoasc',
        '-y',
        output_path
    ]

    try:
        # Inicia o processo FFmpeg, redirecionando stderr para um pipe para ler o progresso.
        process = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE, text=True, encoding='utf-8')

        # Express√£o regular para encontrar a informa√ß√£o de tempo na sa√≠da do FFmpeg (ex: time=00:01:23.45).
        time_pattern = re.compile(r"time=(\d{2}):(\d{2}):(\d{2})\.(\d{2})")

        # Loop para ler a sa√≠da do FFmpeg em tempo real.
        while True:
            line = process.stderr.readline()
            if not line and process.poll() is not None:
                break  # O processo terminou e n√£o h√° mais sa√≠da para ler.

            match = time_pattern.search(line)
            if match:
                h, m, s, ms = map(int, match.groups())
                elapsed_seconds = h * 3600 + m * 60 + s + ms / 100
                _log_progress(username, elapsed_seconds, max_duration)

        # Espera o processo terminar e obt√©m o c√≥digo de retorno.
        return_code = process.wait()
        print() # Adiciona uma nova linha para n√£o sobrescrever a √∫ltima linha de progresso.

        if return_code == 0:
            logger.info(f"‚úÖ Grava√ß√£o para '{username}' conclu√≠da com sucesso (c√≥digo {return_code}).")
            # Ap√≥s a grava√ß√£o bem-sucedida, tenta capturar o thumbnail.
            capture_thumbnail(output_path, thumbnail_path)
            return True
        else:
            logger.error(f"‚ùå Grava√ß√£o para '{username}' terminou com erro (c√≥digo {return_code}).")
            return False

    except FileNotFoundError:
        logger.critical("‚ùå Erro Cr√≠tico: O comando 'ffmpeg' n√£o foi encontrado. Verifique se est√° instalado e no PATH.")
        return False
    except Exception as e:
        logger.error(f"‚ùå Ocorreu uma exce√ß√£o inesperada durante a grava√ß√£o de '{username}': {e}")
        return False

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

# @log de mudan√ßas:
# 2025-07-14 (v2.1.0):
# - REFACTOR: Unifica√ß√£o dos dois arquivos. A fun√ß√£o `record_stream` foi renomeada para
#   `record_stream_and_capture_thumbnail` para refletir a sua responsabilidade completa.
# - FEATURE: Reintroduzida a fun√ß√£o `capture_thumbnail` da v1.1.0, agora com logging melhorado.
# - FEATURE: A fun√ß√£o principal agora orquestra a captura do thumbnail ap√≥s uma grava√ß√£o bem-sucedida.
# - REFACTOR: Padronizado o uso do logger nativo do Python (`logging.getLogger`).
# - DOCS: Atualiza√ß√£o completa dos coment√°rios e da documenta√ß√£o para refletir a nova estrutura unificada.
#
# 2025-07-14 (v2.0.0):
# - FEATURE: Implementado o log de progresso em tempo real.
#
# 2025-07-12 (v1.1.0):
# - FEATURE: Adicionada a fun√ß√£o `capture_thumbnail` inicial.

# @roadmap futuro:
# - Criar uma classe `Recorder` para gerir o estado do processo FFmpeg de forma mais robusta,
#   permitindo pausar ou parar a grava√ß√£o de forma mais limpa.
# - Permitir a passagem de par√¢metros customizados do FFmpeg (ex: `-vf` para filtros)
#   atrav√©s da fun√ß√£o de grava√ß√£o.
