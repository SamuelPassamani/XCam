# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         rec_manager.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.0.0
# @lastupdate:     2025-07-13
# @description:    Este m√≥dulo √© respons√°vel por gerenciar os arquivos de metadados `rec.json`.
#                  Ele lida com a cria√ß√£o (a partir de um template) e a atualiza√ß√£o desses
#                  arquivos, construindo e inserindo novos registros de v√≠deo com todos os
#                  campos formatados corretamente, garantindo a integridade do nosso "Git-as-a-Database".
# @modes:          - Gerenciador de arquivos JSON.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

# Importa√ß√µes de bibliotecas necess√°rias.
import json         # Para manipula√ß√£o de dados no formato JSON.
import os           # Para intera√ß√µes com o sistema de arquivos (caminhos, diret√≥rios).
from datetime import datetime # Para obter a data e hora atuais.
import pytz         # Para trabalhar com fusos hor√°rios espec√≠ficos (neste caso, 'America/Sao_Paulo').

# Importa a inst√¢ncia do nosso logger customizado.
from utils.logger import log

# Define os caminhos base para o diret√≥rio do banco de dados e para o template.
# Centralizar isso facilita a manuten√ß√£o caso a estrutura de pastas mude.
DB_PATH = "xcam-db/user/"
TEMPLATE_PATH = "templates/rec.json"

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def _format_duration(seconds: int) -> str:
    """
    Fun√ß√£o auxiliar interna para converter uma dura√ß√£o em segundos para um formato leg√≠vel (ex: 1h2m3s).

    Args:
        seconds (int): A dura√ß√£o total em segundos.

    Returns:
        str: A string formatada.
    """
    # Calcula horas, minutos e segundos a partir do total de segundos.
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    # Constr√≥i a string de dura√ß√£o, omitindo partes que s√£o zero.
    parts = []
    if hours > 0:
        parts.append(f"{int(hours)}h")
    if minutes > 0:
        parts.append(f"{int(minutes)}m")
    if seconds > 0 or not parts: # Mostra segundos se for a √∫nica unidade ou se a dura√ß√£o for 0.
        parts.append(f"{int(seconds)}s")
        
    return "".join(parts)

def create_or_update_rec_json(username: str, video_id: str, upload_url: str, poster_url: str, duration_seconds: int):
    """
    Cria ou atualiza o arquivo rec.json para um usu√°rio, adicionando um novo registro de v√≠deo.

    Args:
        username (str): O nome de usu√°rio do streamer.
        video_id (str): O ID √∫nico do v√≠deo (geralmente a parte final da URL de upload).
        upload_url (str): A URL completa para o v√≠deo (ex: https://short.icu/...).
        poster_url (str): A URL completa para a imagem do poster.
        duration_seconds (int): A dura√ß√£o da grava√ß√£o em segundos.
    """
    # Define o caminho completo para o diret√≥rio e o arquivo do usu√°rio.
    user_dir = os.path.join(DB_PATH, username)
    user_rec_path = os.path.join(user_dir, "rec.json")

    # Garante que o diret√≥rio do usu√°rio exista.
    os.makedirs(user_dir, exist_ok=True)

    # Tenta carregar o arquivo rec.json existente.
    try:
        if os.path.exists(user_rec_path):
            with open(user_rec_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            log.info(f"Arquivo rec.json existente para '{username}' carregado.")
        else:
            # Se n√£o existir, clona a estrutura a partir do nosso template.
            with open(TEMPLATE_PATH, 'r', encoding='utf-8') as f:
                data = json.load(f)
            # Define o nome de usu√°rio no novo arquivo.
            data["username"] = username
            log.info(f"Nenhum rec.json encontrado para '{username}'. Criando um novo a partir do template.")
    except (json.JSONDecodeError, IOError) as e:
        log.error(f"N√£o foi poss√≠vel ler o arquivo rec.json ou o template para '{username}': {e}")
        return # Aborta a fun√ß√£o se n√£o for poss√≠vel ler os arquivos.

    # --- Constru√ß√£o do novo registro de v√≠deo ---
    
    # Obt√©m a data e hora atuais no fuso hor√°rio de S√£o Paulo.
    now_sp = datetime.now(pytz.timezone('America/Sao_Paulo'))
    
    # Formata os componentes de data, hora e dura√ß√£o.
    formatted_date = now_sp.strftime('%d-%m-%Y')
    formatted_time = now_sp.strftime('%H-%M')
    formatted_duration = _format_duration(duration_seconds)

    # Constr√≥i os campos `title` e `file`.
    title = f"{username}_{formatted_date}_{formatted_time}_{formatted_duration}"
    file_name = f"{title}.mp4"
    
    # Constr√≥i a URL do iframe com o thumbnail.
    iframe_url = f"{upload_url}?thumbnail={poster_url}"
    
    # Cria o dicion√°rio completo para o novo registro de v√≠deo.
    new_video_record = {
        "video": video_id,
        "title": title,
        "file": file_name,
        "url": upload_url,
        "poster": poster_url,
        "urlIframe": iframe_url,
        "data": formatted_date,
        "horario": formatted_time,
        "tempo": formatted_duration
    }

    # Adiciona o novo registro ao in√≠cio da lista de v√≠deos (para que os mais recentes apare√ßam primeiro).
    data["videos"].insert(0, new_video_record)
    # Atualiza a contagem total de registros.
    data["records"] = len(data["videos"])

    # Tenta salvar o arquivo JSON atualizado.
    try:
        # Abre o arquivo em modo de escrita ('w').
        with open(user_rec_path, 'w', encoding='utf-8') as f:
            # `json.dump` escreve o dicion√°rio no arquivo.
            # `indent=2` formata o JSON de forma leg√≠vel, com 2 espa√ßos de indenta√ß√£o.
            json.dump(data, f, indent=2, ensure_ascii=False)
        log.info(f"üíæ Arquivo rec.json para '{username}' atualizado com sucesso. Total de {data['records']} registros.")
    except IOError as e:
        log.error(f"Falha ao salvar o arquivo rec.json para '{username}': {e}")

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

# @log de mudan√ßas:
# 2025-07-13 (v1.0.0):
# - Cria√ß√£o inicial do m√≥dulo `rec_manager.py`.
# - Implementada a fun√ß√£o `create_or_update_rec_json` para ler, modificar e salvar os metadados.
# - Adicionado o uso de `templates/rec.json` para criar arquivos para novos usu√°rios.
# - Implementada a l√≥gica de constru√ß√£o de todos os campos do registro de v√≠deo, conforme o notebook.
# - Adicionada a fun√ß√£o auxiliar `_format_duration` para formatar o tempo de grava√ß√£o.
# - Integra√ß√£o completa com o logger customizado.

# @roadmap futuro:
# - Adicionar uma fun√ß√£o de "limpeza" que possa remover registros antigos ou inv√°lidos.
# - Implementar um mecanismo de backup (ex: `rec.json.bak`) antes de salvar para evitar corrup√ß√£o de dados.
# - Criar uma classe `RecManager` se a necessidade de mais fun√ß√µes de gerenciamento (deletar, buscar) surgir.
