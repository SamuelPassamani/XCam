# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         main.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.5.0
# @lastupdate:     2025-07-14
# @description:    Script principal e orquestrador do m√≥dulo XCam Rec. Este script √© respons√°vel
#                  por obter a lista de streamers online, iniciar processos de grava√ß√£o paralelos,
#                  validar a dura√ß√£o das grava√ß√µes, fazer o upload do conte√∫do e, finalmente,
#                  atualizar os metadados no "Git-as-a-Database".
# @modes:          - Aplica√ß√£o de Linha de Comando (CLI) para ser executada pelo Launcher.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

# --- Importa√ß√µes de Bibliotecas Padr√£o ---
import argparse
import os
import re
import shutil
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, Any

# --- Importa√ß√µes de M√≥dulos do Projeto ---
# Importa as configura√ß√µes de caminhos e os valores padr√£o.
import config

# Importa as fun√ß√µes utilit√°rias dos outros m√≥dulos.
from utils.logger import setup_logging # Assumindo que logger.py tem uma fun√ß√£o de setup.
from utils.xcam_api import get_online_models
from utils.ffmpeg_recorder import record_stream_and_capture_thumbnail # <-- CORRE√á√ÉO: Importa a fun√ß√£o unificada.
from utils.video_utils import manage_recorded_file # <-- FEATURE: Importa a nova fun√ß√£o de valida√ß√£o.
from utils.abyss_upload import upload_video
from utils.rec_manager import create_or_update_rec_json, RecordingManager

# Inicializa o logger principal da aplica√ß√£o.
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def _sanitize_filename(name: str) -> str:
    """Remove caracteres inv√°lidos de uma string para us√°-la como nome de ficheiro."""
    # Substitui qualquer caracter que n√£o seja letra, n√∫mero, underscore, h√≠fen ou ponto.
    return re.sub(r'[^\w\-. ]', '', name)

def process_broadcast(broadcast: Dict[str, Any], min_duration: int, max_duration: int):
    """
    Worker que executa o fluxo completo para uma √∫nica transmiss√£o.
    Grava, valida a dura√ß√£o, faz o upload e atualiza os metadados.
    """
    username = broadcast.get("username")
    stream_url = broadcast.get("hls_url") # Garante que estamos a usar a URL HLS correta.

    # Valida√ß√£o inicial dos dados da transmiss√£o.
    if not all([username, stream_url]):
        logger.warning(f"‚ö†Ô∏è Transmiss√£o com dados incompletos, pulando: {broadcast.get('id')}")
        return

    logger.info(f"‚ñ∂Ô∏è  Iniciando processamento para o streamer: {username}")
    
    # Define os caminhos para os ficheiros tempor√°rios.
    safe_filename_base = f"{_sanitize_filename(username)}_{int(time.time())}"
    temp_video_path = os.path.join(config.TEMP_RECORDS_PATH, f"{safe_filename_base}.mp4")
    temp_poster_path = os.path.join(config.TEMP_POSTERS_PATH, f"{safe_filename_base}.jpg")

    try:
        # --- Etapa 1: Grava√ß√£o e Captura do Thumbnail ---
        # Chama a fun√ß√£o unificada que lida com a grava√ß√£o e a captura da imagem.
        record_successful = record_stream_and_capture_thumbnail(
            username=username,
            stream_url=stream_url,
            output_path=temp_video_path,
            thumbnail_path=temp_poster_path,
            max_duration=max_duration
        )

        # Se a grava√ß√£o falhar, interrompe o processo para este streamer.
        if not record_successful:
            logger.error(f"‚ùå A grava√ß√£o para {username} falhou. Abortando tarefa.")
            return

        # --- Etapa 2: Valida√ß√£o da Dura√ß√£o M√≠nima ---
        # Chama a fun√ß√£o que verifica a dura√ß√£o e decide se mant√©m ou descarta os ficheiros.
        file_is_valid = manage_recorded_file(
            video_path=temp_video_path,
            thumbnail_path=temp_poster_path,
            min_duration=min_duration
        )
        
        # Se o ficheiro n√£o for v√°lido (muito curto), interrompe o processo.
        if not file_is_valid:
            return # A fun√ß√£o manage_recorded_file j√° registou o motivo.

        # --- Etapa 3: Upload do V√≠deo e Gest√£o do Poster ---
        # Esta etapa s√≥ √© executada se a grava√ß√£o for v√°lida.
        logger.info(f"üì§ Iniciando upload do v√≠deo para {username}...")
        upload_response = upload_video(temp_video_path)
        
        if not upload_response or "id" not in upload_response:
            logger.error(f"‚ùå Falha no upload ou resposta inv√°lida para {username}. Abortando.")
            return
        
        video_slug = upload_response.get("id")
        final_video_url = upload_response.get("url")
        
        # Move o poster para o diret√≥rio persistente, renomeando-o com o slug do v√≠deo.
        user_poster_dir = os.path.join(config.DRIVE_PERSISTENT_USER_PATH, username)
        os.makedirs(user_poster_dir, exist_ok=True)
        final_poster_path = os.path.join(user_poster_dir, f"{video_slug}.jpg")
        shutil.move(temp_poster_path, final_poster_path)
        final_poster_public_url = f"https://db.xcam.gay/user/{username}/{video_slug}.jpg"
        logger.info(f"üñºÔ∏è  Poster movido para o destino final: {final_poster_path}")

        # --- Etapa 4: Atualizar Metadados ---
        create_or_update_rec_json(
            username=username,
            video_id=video_slug,
            upload_url=final_video_url,
            poster_url=final_poster_public_url,
            duration_seconds=int(get_video_duration(temp_video_path)) # Obt√©m a dura√ß√£o real
        )
        logger.info(f"‚úÖ Processo para {username} conclu√≠do com sucesso.")

    finally:
        # --- Etapa 5: Limpeza Final ---
        # Garante que todos os ficheiros tempor√°rios sejam removidos, independentemente do resultado.
        if os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        if os.path.exists(temp_poster_path):
            os.remove(temp_poster_path)
        logger.info(f"üßπ Arquivos tempor√°rios para {username} foram limpos.")


def main(args: argparse.Namespace):
    """
    Fun√ß√£o principal que orquestra a busca e o processamento de todas as transmiss√µes.
    """
    # Configura o sistema de logging com base nas defini√ß√µes do config.py.
    setup_logging(log_level=config.LOG_LEVEL, log_file=os.path.join(config.LOGS_PATH, config.LOG_FILE))
    
    logger.info("üöÄ Iniciando o XCam REC Engine...")
    logger.info(f"    - Dura√ß√£o M√≠nima: {args.min_duration}s | Dura√ß√£o M√°xima: {args.max_duration}s")
    
    # Cria os diret√≥rios de trabalho necess√°rios (temp, logs, etc.).
    os.makedirs(config.TEMP_RECORDS_PATH, exist_ok=True)
    os.makedirs(config.TEMP_POSTERS_PATH, exist_ok=True)
    os.makedirs(config.LOGS_PATH, exist_ok=True)
    
    rec_manager = RecordingManager()

    while True:
        try:
            logger.info(f"üì° A procurar modelos online (P√°gina: {args.page}, Limite: {args.limit})...")
            online_models = get_online_models(page=args.page, limit=args.limit, country=args.country)

            if not online_models:
                logger.info("üí§ Nenhum modelo online encontrado nesta verifica√ß√£o.")
            else:
                logger.info(f"üü¢ Encontrados {len(online_models)} modelos online. A iniciar processamento...")
                
                with ThreadPoolExecutor(max_workers=args.workers) as executor:
                    futures = []
                    for model in online_models:
                        username = model.get("username")
                        if username and not rec_manager.is_recording(username):
                            rec_manager.add_model(username)
                            # Submete a tarefa ao executor com todos os argumentos necess√°rios.
                            future = executor.submit(process_broadcast, model, args.min_duration, args.max_duration)
                            futures.append(future)
                    
                    # Aguarda a conclus√£o das tarefas submetidas.
                    for future in as_completed(futures):
                        try:
                            future.result()
                        except Exception as exc:
                            logger.critical(f"üî• Uma tarefa de grava√ß√£o gerou uma exce√ß√£o n√£o tratada: {exc}", exc_info=True)
        
        except Exception as e:
            logger.critical(f"üî• Erro cr√≠tico no loop principal: {e}", exc_info=True)

        logger.info(f"‚è≥ A aguardar {config.DEFAULT_EXECUTION_SETTINGS['CHECK_INTERVAL_SECONDS']} segundos para a pr√≥xima verifica√ß√£o.")
        time.sleep(config.DEFAULT_EXECUTION_SETTINGS['CHECK_INTERVAL_SECONDS'])

# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

if __name__ == "__main__":
    # Configura o parser de argumentos da linha de comando.
    parser = argparse.ArgumentParser(description="XCam REC - Gravador Modular de Transmiss√µes.", formatter_class=argparse.RawTextHelpFormatter)
    
    # --- CORRE√á√ÉO: Atualiza os argumentos para refletir as novas configura√ß√µes ---
    parser.add_argument('--page', type=int, help='N√∫mero da p√°gina da API a ser consultada.')
    parser.add_argument('--limit', type=int, help='N√∫mero m√°ximo de transmiss√µes por p√°gina.')
    parser.add_argument('--workers', type=int, help='N√∫mero de grava√ß√µes paralelas (threads).')
    parser.add_argument('--max-duration', type=int, help='Dura√ß√£o m√°xima de cada grava√ß√£o em segundos.')
    parser.add_argument('--min-duration', type=int, help='Dura√ß√£o m√≠nima para que uma grava√ß√£o seja mantida.')
    parser.add_argument('--country', type=str, help='Filtra por c√≥digo de pa√≠s (ex: br, us).')
    
    args = parser.parse_args()
    
    # Chama a fun√ß√£o principal com os argumentos recebidos.
    main(args)

# @log de mudan√ßas:
# 2025-07-14 (v1.5.0):
# - CORRE√á√ÉO: Corrigido o `ImportError` ao importar `record_stream_and_capture_thumbnail` de `ffmpeg_recorder`.
# - FEATURE: Implementada a l√≥gica de valida√ß√£o de `min_duration` atrav√©s da chamada a `manage_recorded_file`.
# - REFACTOR: A fun√ß√£o `process_broadcast` foi reestruturada para seguir o novo fluxo de grava√ß√£o -> valida√ß√£o -> upload.
# - REFACTOR: Os argumentos de linha de comando foram atualizados para `--max-duration` e `--min-duration`.
# - DOCS: Coment√°rios atualizados para refletir a nova l√≥gica e fluxo de execu√ß√£o.
#
# 2025-07-13 (v1.4.0):
# - Vers√£o anterior com l√≥gica de upload e gest√£o de ficheiros, mas com importa√ß√µes desatualizadas.

# @roadmap futuro:
# - Adicionar um sistema de gest√£o de estado mais robusto (ex: base de dados local como SQLite) para
#   controlar as grava√ß√µes e evitar perdas de estado se o script for reiniciado.
# - Implementar uma l√≥gica de "retry" com backoff exponencial para uploads que falham.
# - Criar um mecanismo para limpar ficheiros tempor√°rios muito antigos que possam ter ficado para tr√°s
#   devido a uma interrup√ß√£o abrupta do script.
