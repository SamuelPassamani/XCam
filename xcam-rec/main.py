# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         main.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.4.0
# @lastupdate:     2025-07-13
# @description:    Este √© o script principal e orquestrador do projeto XCam Rec. Ele implementa
#                  a l√≥gica de gravar v√≠deos, fazer o seu upload para um servi√ßo de alojamento
#                  externo, e guardar os posters gerados de forma persistente no Google Drive,
#                  atualizando os metadados no "Git-as-a-Database".
# @modes:          - Aplica√ß√£o de Linha de Comando (CLI) para ambiente Google Colab.

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

import argparse
import os
import re
import shutil
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, Any

# Importa as configura√ß√µes centrais do projeto
from config import TEMP_RECORDS_PATH, TEMP_POSTERS_PATH, DRIVE_PERSISTENT_USER_PATH

# Importa todas as nossas fun√ß√µes modulares
from utils.logger import log
from utils.xcam_api import get_online_broadcasts
from utils.ffmpeg_recorder import record_stream, capture_thumbnail
# CORRE√á√ÉO: Importa a fun√ß√£o renomeada 'upload_video'
from utils.abyss_upload import upload_video
from utils.rec_manager import create_or_update_rec_json

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def _sanitize_filename(name: str) -> str:
    """Remove caracteres inv√°lidos de uma string para us√°-la como nome de ficheiro."""
    return re.sub(r'[^\w\-. ]', '', name)

def mount_google_drive():
    """Monta o Google Drive no ambiente Colab."""
    try:
        from google.colab import drive
        log.info("üõ∞Ô∏è  Montando o Google Drive em /content/drive...")
        drive.mount('/content/drive', force_remount=True)
        log.info("‚úÖ Google Drive montado com sucesso.")
    except Exception as e:
        log.warning(f"‚ö†Ô∏è  N√£o foi poss√≠vel montar o Google Drive: {e}. O script continuar√° usando o armazenamento local.")

def setup_directories():
    """Cria os diret√≥rios de trabalho necess√°rios."""
    log.info("Verificando e criando diret√≥rios de trabalho...")
    try:
        for path in [TEMP_RECORDS_PATH, TEMP_POSTERS_PATH, DRIVE_PERSISTENT_USER_PATH]:
            os.makedirs(path, exist_ok=True)
        log.info("‚úÖ Diret√≥rios de trabalho prontos.")
    except Exception as e:
        log.critical(f"üî• Falha ao criar os diret√≥rios de trabalho: {e}")
        exit()

def process_broadcast(broadcast: Dict[str, Any], record_duration: int):
    """Fun√ß√£o de worker que processa uma √∫nica transmiss√£o, implementando a nova l√≥gica de ficheiros."""
    username = broadcast.get("username")
    stream_url = broadcast.get("preview", {}).get("src")

    if not all([username, stream_url]):
        log.warning(f"Transmiss√£o com dados incompletos, pulando: {broadcast.get('id')}")
        return

    log.info(f"‚ñ∂Ô∏è  Iniciando processamento para o streamer: {username}")
    safe_filename_base = _sanitize_filename(username)
    temp_video_path = os.path.join(TEMP_RECORDS_PATH, f"{safe_filename_base}.mp4")
    temp_poster_path = os.path.join(TEMP_POSTERS_PATH, f"{safe_filename_base}.jpg")

    try:
        # Etapa 1: Gravar a Stream para um ficheiro de v√≠deo tempor√°rio.
        if not record_stream(stream_url, temp_video_path, duration=record_duration):
            return # A fun√ß√£o record_stream j√° loga o erro.

        # Etapa 2: Fazer o Upload do V√≠deo para obter o slug (ID).
        # CORRE√á√ÉO: Chama a fun√ß√£o 'upload_video' que agora retorna um dicion√°rio.
        upload_response = upload_video(temp_video_path)
        # CORRE√á√ÉO: Verifica se a resposta do upload n√£o √© None antes de continuar.
        if not upload_response:
            log.error(f"‚ùå Falha no upload do v√≠deo para {username}. Abortando esta tarefa.")
            return
        
        # Extrai os dados da resposta do upload.
        video_slug = upload_response.get("id")
        final_video_url = upload_response.get("url")

        # Verifica se obtivemos um slug v√°lido.
        if not video_slug:
            log.error(f"‚ùå N√£o foi poss√≠vel obter o 'slug' do v√≠deo para {username} ap√≥s o upload. Abortando.")
            return

        # Etapa 3: Gerir o Poster.
        final_poster_public_url = ""
        if capture_thumbnail(temp_video_path, temp_poster_path):
            # Define o caminho final e persistente para o poster no Drive.
            user_poster_dir = os.path.join(DRIVE_PERSISTENT_USER_PATH, username)
            os.makedirs(user_poster_dir, exist_ok=True) # Garante que a pasta do utilizador existe.
            final_poster_path = os.path.join(user_poster_dir, f"{video_slug}.jpg")
            
            # Move o poster tempor√°rio para o seu local final, renomeando-o com o slug.
            shutil.move(temp_poster_path, final_poster_path)
            log.info(f"üñºÔ∏è  Poster movido para o destino final: {final_poster_path}")
            
            # Constr√≥i a URL p√∫blica para o poster, que ser√° usada no rec.json.
            final_poster_public_url = f"https://db.xcam.gay/user/{username}/{video_slug}.jpg"
        else:
            log.warning(f"‚ö†Ô∏è  N√£o foi poss√≠vel capturar o poster para {username}.")

        # Etapa 4: Atualizar o ficheiro de Metadados.
        create_or_update_rec_json(
            username=username, video_id=video_slug,
            upload_url=final_video_url, poster_url=final_poster_public_url,
            duration_seconds=record_duration
        )
        log.info(f"‚úÖ Processo para {username} conclu√≠do com sucesso.")

    finally:
        # Etapa 5: Limpeza segura dos ficheiros tempor√°rios.
        if os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        if os.path.exists(temp_poster_path): # Caso o poster n√£o tenha sido movido por alguma falha.
            os.remove(temp_poster_path)
        log.info(f"üßπ Arquivos tempor√°rios para {username} foram limpos.")


def main(args: argparse.Namespace):
    """Fun√ß√£o principal que orquestra a busca e o processamento."""
    log.info("üöÄ Iniciando o XCam REC Engine...")
    mount_google_drive()
    setup_directories()

    all_broadcasts = []
    for page_num in range(1, args.page + 1):
        broadcasts = get_online_broadcasts(page=page_num, limit=args.limit, country=args.country)
        if not broadcasts:
            break
        all_broadcasts.extend(broadcasts)

    if not all_broadcasts:
        log.info("Nenhuma transmiss√£o online encontrada. Encerrando.")
        return

    log.info(f"Total de {len(all_broadcasts)} transmiss√µes. Iniciando processamento com {args.workers} workers.")

    with ThreadPoolExecutor(max_workers=args.workers) as executor:
        future_to_broadcast = {executor.submit(process_broadcast, broadcast, args.duration): broadcast for broadcast in all_broadcasts}
        for future in as_completed(future_to_broadcast):
            broadcast = future_to_broadcast[future]
            try:
                future.result()
            except Exception as exc:
                log.critical(f"O processamento para '{broadcast.get('username')}' gerou uma exce√ß√£o: {exc}")

    log.info("üèÅ XCam REC Engine concluiu a execu√ß√£o de todas as tarefas.")


# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="XCam REC - Gravador Modular de Transmiss√µes.", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--page', type=int, default=1, help='N√∫mero m√°x. de p√°ginas da API. (Padr√£o: 1)')
    parser.add_argument('--limit', type=int, default=50, help='Transmiss√µes por p√°gina. (Padr√£o: 50)')
    parser.add_argument('--workers', type=int, default=5, help='Grava√ß√µes paralelas. (Padr√£o: 5)')
    parser.add_argument('--duration', type=int, default=120, help='Dura√ß√£o da grava√ß√£o em segundos. (Padr√£o: 120)')
    parser.add_argument('--country', type=str, default=None, help='Filtra por pa√≠s (ex: br, us). (Padr√£o: Nenhum)')
    args = parser.parse_args()
    main(args)

# @log de mudan√ßas:
# 2025-07-13 (v1.4.0):
# - CORRE√á√ÉO: A fun√ß√£o `process_broadcast` foi ajustada para lidar com a resposta em dicion√°rio
#   da fun√ß√£o `upload_video`, resolvendo o erro "'NoneType' object has no attribute 'get'".
# - REFINAMENTO: Alterado o fluxo de trabalho dos posters para serem movidos para o Drive.
#
# 2025-07-13 (v1.3.0):
# - CORRE√á√ÉO: Adicionada a fun√ß√£o `_sanitize_filename` para limpar nomes de ficheiro.
