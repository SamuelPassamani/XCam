# -*- coding: utf-8 -*-

# ---------------------------------------------------------------------------------------------
# 1. CABE√áALHO / IN√çCIO
# ---------------------------------------------------------------------------------------------

# @titulo:         main.py
# @author:         Samuel Passamani / Um Projeto do Estudio A.S√©rio [AllS Company]
# @info:           https://aserio.work/
# @version:        1.0.0
# @lastupdate:     2025-07-13
# @description:    Este √© o script principal e orquestrador do projeto XCam Rec. Ele √©
#                  respons√°vel por buscar a lista de transmiss√µes online, distribuir as
#                  tarefas de grava√ß√£o e upload para workers paralelos, e garantir que
#                  todo o ciclo de vida de cada grava√ß√£o seja conclu√≠do corretamente.
# @modes:          - Aplica√ß√£o de Linha de Comando (CLI).

# ---------------------------------------------------------------------------------------------
# 2. CONFIGURA√á√ïES & VARI√ÅVEIS GLOBAIS
# ---------------------------------------------------------------------------------------------

# Importa√ß√µes de bibliotecas padr√£o
import argparse
import os
import tempfile
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, Any

# Importa todas as nossas fun√ß√µes modulares
from utils.logger import log
from utils.xcam_api import get_online_broadcasts
from utils.ffmpeg_recorder import record_stream, capture_thumbnail
from utils.abyss_upload import upload_file
from utils.rec_manager import create_or_update_rec_json

# ---------------------------------------------------------------------------------------------
# 3. CORPO
# ---------------------------------------------------------------------------------------------

def process_broadcast(broadcast: Dict[str, Any], record_duration: int):
    """
    Fun√ß√£o de worker que processa uma √∫nica transmiss√£o.
    Executa a sequ√™ncia completa: gravar, capturar poster, fazer upload e atualizar metadados.

    Args:
        broadcast (Dict[str, Any]): O dicion√°rio contendo os dados da transmiss√£o.
        record_duration (int): A dura√ß√£o da grava√ß√£o em segundos.
    """
    # Extrai as informa√ß√µes essenciais da transmiss√£o.
    username = broadcast.get("username")
    stream_url = broadcast.get("hls_url")

    # Valida√ß√£o inicial para garantir que temos os dados m√≠nimos para prosseguir.
    if not all([username, stream_url]):
        log.warning(f"Transmiss√£o com dados incompletos, pulando: {broadcast.get('id')}")
        return

    log.info(f"‚ñ∂Ô∏è  Iniciando processamento para o streamer: {username}")

    # Cria um diret√≥rio tempor√°rio para armazenar os arquivos desta tarefa.
    # O `with` garante que o diret√≥rio e seu conte√∫do sejam removidos ao final.
    with tempfile.TemporaryDirectory() as temp_dir:
        # Define os caminhos para os arquivos de v√≠deo e poster tempor√°rios.
        video_path = os.path.join(temp_dir, f"{username}.mp4")
        poster_path = os.path.join(temp_dir, f"{username}.jpg")

        # --- Etapa 1: Gravar a Stream ---
        if not record_stream(stream_url, video_path, duration=record_duration):
            log.error(f"‚ùå Falha ao gravar a stream para {username}. Abortando esta tarefa.")
            return # Interrompe o processamento para este streamer.

        # --- Etapa 2: Capturar o Poster (Thumbnail) ---
        if not capture_thumbnail(video_path, poster_path):
            log.warning(f"‚ö†Ô∏è  N√£o foi poss√≠vel capturar o poster para {username}. O processo continuar√° sem ele.")
            # Define o poster_url como vazio para que o rec_manager possa lidar com isso.
            final_poster_url = ""
        else:
            # --- Etapa 3a: Upload do Poster ---
            final_poster_url = upload_file(poster_path)
            if not final_poster_url:
                log.warning(f"‚ö†Ô∏è  Falha no upload do poster para {username}. O processo continuar√°.")
                final_poster_url = ""

        # --- Etapa 3b: Upload do V√≠deo ---
        final_video_url = upload_file(video_path)
        if not final_video_url:
            log.error(f"‚ùå Falha no upload do v√≠deo para {username}. Abortando esta tarefa.")
            return

        # --- Etapa 4: Atualizar Metadados ---
        # Extrai o ID do v√≠deo da URL retornada pelo servi√ßo de upload.
        video_id = final_video_url.split('/')[-1]
        create_or_update_rec_json(
            username=username,
            video_id=video_id,
            upload_url=final_video_url,
            poster_url=final_poster_url,
            duration_seconds=record_duration
        )

    log.info(f"‚úÖ Processo para {username} conclu√≠do com sucesso.")


def main(args: argparse.Namespace):
    """
    Fun√ß√£o principal que orquestra a busca e o processamento paralelo das transmiss√µes.

    Args:
        args (argparse.Namespace): Objeto contendo os argumentos da linha de comando.
    """
    log.info("üöÄ Iniciando o XCam REC Engine...")
    all_broadcasts = []

    # Busca as transmiss√µes da API, p√°gina por p√°gina.
    for page_num in range(1, args.pages + 1):
        log.info(f"Buscando p√°gina {page_num} de transmiss√µes...")
        broadcasts = get_online_broadcasts(page=page_num, limit=args.limit, country=args.country)
        if not broadcasts:
            log.info("N√£o foram encontradas mais transmiss√µes. Finalizando a busca.")
            break
        all_broadcasts.extend(broadcasts)

    # Verifica se alguma transmiss√£o foi encontrada.
    if not all_broadcasts:
        log.info("Nenhuma transmiss√£o online encontrada com os crit√©rios definidos. Encerrando.")
        return

    log.info(f"Total de {len(all_broadcasts)} transmiss√µes encontradas. Iniciando processamento paralelo com {args.workers} workers.")

    # Usa um ThreadPoolExecutor para processar as transmiss√µes em paralelo.
    # Threads s√£o ideais aqui, pois as tarefas s√£o "I/O-bound" (esperam por rede ou disco).
    with ThreadPoolExecutor(max_workers=args.workers) as executor:
        # Submete cada tarefa de processamento ao pool de threads.
        future_to_broadcast = {executor.submit(process_broadcast, broadcast, args.duration): broadcast for broadcast in all_broadcasts}

        # Itera sobre os futuros √† medida que eles s√£o conclu√≠dos.
        for future in as_completed(future_to_broadcast):
            broadcast = future_to_broadcast[future]
            try:
                # `future.result()` n√£o retorna nada, mas levantar√° uma exce√ß√£o se a tarefa falhou.
                future.result()
            except Exception as exc:
                # Loga qualquer exce√ß√£o inesperada que tenha ocorrido dentro de uma thread.
                log.critical(f"O processamento para '{broadcast.get('username')}' gerou uma exce√ß√£o: {exc}")

    log.info("üèÅ XCam REC Engine concluiu a execu√ß√£o de todas as tarefas.")


# ---------------------------------------------------------------------------------------------
# 4. RODAP√â / FIM DO C√ìDIGO
# ---------------------------------------------------------------------------------------------

if __name__ == "__main__":
    # Configura o parser de argumentos da linha de comando.
    # Isso torna o script configur√°vel sem precisar editar o c√≥digo.
    parser = argparse.ArgumentParser(
        description="XCam REC - Gravador Modular de Transmiss√µes.",
        formatter_class=argparse.RawTextHelpFormatter
    )

    # Define os argumentos que o script pode aceitar.
    parser.add_argument('--pages', type=int, default=2, help='N√∫mero m√°ximo de p√°ginas da API para buscar. (Padr√£o: 2)')
    parser.add_argument('--limit', type=int, default=50, help='N√∫mero de transmiss√µes por p√°gina. (Padr√£o: 50)')
    parser.add_argument('--workers', type=int, default=5, help='N√∫mero de grava√ß√µes paralelas. (Padr√£o: 5)')
    parser.add_argument('--duration', type=int, default=120, help='Dura√ß√£o de cada grava√ß√£o em segundos. (Padr√£o: 120)')
    parser.add_argument('--country', type=str, default=None, help='Filtra por c√≥digo do pa√≠s (ex: br, us, it). (Padr√£o: Nenhum)')

    # Faz o parse dos argumentos fornecidos na linha de comando.
    args = parser.parse_args()

    # Chama a fun√ß√£o principal com os argumentos.
    main(args)

# @log de mudan√ßas:
# 2025-07-13 (v1.0.0):
# - Cria√ß√£o inicial do orquestrador `main.py`.
# - Implementa√ß√£o da l√≥gica de parsing de argumentos de linha de comando.
# - Cria√ß√£o da fun√ß√£o `main` para orquestrar o fluxo.
# - Cria√ß√£o da fun√ß√£o `process_broadcast` para o processamento de cada streamer.
# - Integra√ß√£o de todos os m√≥dulos `utils` para um fluxo de trabalho completo.
# - Implementa√ß√£o de processamento paralelo com `ThreadPoolExecutor`.

# @roadmap futuro:
# - Adicionar um mecanismo para evitar gravar o mesmo streamer m√∫ltiplas vezes na mesma execu√ß√£o.
# - Permitir a passagem de uma lista de usu√°rios espec√≠ficos para gravar via linha de comando.
# - Criar um modo "daemon" para que o script rode continuamente, verificando por novas streams a cada X minutos.
# - Adicionar um sum√°rio no final da execu√ß√£o (ex: X grava√ß√µes bem-sucedidas, Y falhas).
